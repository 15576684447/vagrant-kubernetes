- name: Overwrite Vboxnameserver because of bad performance on OSX
  lineinfile:
    path: /etc/dhcp/dhclient.conf
    line: 'supersede domain-name-servers 8.8.8.8, 8.8.4.4;'
- copy:
    content: "nameserver 8.8.8.8\nnameserver 8.8.4.4\n"
    dest: /etc/resolv.conf

- name: Disable all docker networking stuff, we will set it up manually
  file:
    path: /etc/docker/
    state: directory
- template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json

- name: Setup the bridge for docker, we connect it with the VirtualBox network (eth1)
  template:
    src: cbr0.j2
    dest: /etc/network/interfaces.d/cbr0

# TODO notify
- name: Fix various settings on start
  copy:
    src: vagrant-startup.service
    dest: /etc/systemd/system/vagrant-startup.service
- template:
    src: vagrant-startup.sh.j2
    dest: /usr/bin/vagrant-startup
    mode: +x
- service:
    name: vagrant-startup
    state: started
    enabled: yes

- name: Configure journald
  file:
    path: /var/log/journal
    state: directory
    group: systemd-journal
    mode: g+rwx
- lineinfile:
    path: /etc/systemd/journald.conf
    line: "SystemMaxUse=256M"
- name: Give the vagrant user full access to the journal
  user:
    name: vagrant
    append: true
    groups: systemd-journal
- name: Remove rsyslog
  apt:
    name: rsyslog
    state: absent
    purge: yes

- name: Install https transport
  apt:
    update_cache: yes
    name: apt-transport-https

- name: Install Docker repo
  copy:
    content: "deb https://download.docker.com/linux/debian stretch stable"
    dest: /etc/apt/sources.list.d/docker.list
- apt_key:
    url: https://download.docker.com/linux/debian/gpg

- name: Mask Docker
  systemd:
    name: docker
    masked: true

- name: Update all packages to the latest version
  apt:
    update_cache: yes
    upgrade: dist

- name: Install packages
  with_items:
   - bridge-utils
   - ethtool
   - htop
   - vim
   - curl
   - "docker-ce={{ DOCKER_VERSION }}~ce-0~debian"
   - bindfs # bindfs is for fixing NFS mount permissions
  apt:
    name: "{{ item }}"
    install_recommends: no


- name: dd vagrant user to docker group, so that vagrant can user docker without sudo
  user:
    name: vagrant
    append: true
    groups: docker

- name: "Download etcd {{ ETCD_VERSION }}"
  get_url:
    dest: "/vagrant/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    url: "https://github.com/coreos/etcd/releases/download/v{{ ETCD_VERSION }}/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
- name: unarchive
  command: "tar xzf /vagrant/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz --strip-components=1 etcd-v{{ ETCD_VERSION }}-linux-amd64/etcd etcd-v{{ ETCD_VERSION }}-linux-amd64/etcdctl"
  warn: False
  args:
    chdir: /usr/bin
- name: Fix permissions
  with_items:
   - etcd
   - etcdctl
  file:
    path: "/usr/bin/{{ item }}"
    mode: +x


- name: "Download kubernetes {{ KUBERNETES_VERSION }}"
  get_url:
    dest: "/vagrant/kubernetes-server-v{{ KUBERNETES_VERSION }}.tar.gz"
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{ KUBERNETES_VERSION }}/kubernetes-server-linux-amd64.tar.gz"
- name: unarchive
  command: "tar xzf /vagrant/kubernetes-server-v{{ KUBERNETES_VERSION }}.tar.gz --strip-components=3 kubernetes/server/bin/kubectl kubernetes/server/bin/hyperkube"
  warn: False
  args:
    chdir: /usr/bin
- name: Fix permissions
  with_items:
   - hyperkube
   - kubectl
  file:
    path: "/usr/bin/{{ item }}"
    mode: +x
- name: Kubectl bash completion
  shell: "kubectl completion bash > /etc/bash_completion.d/kubectl"
- copy:
    src: kubeconfig.yml
    dest: /etc/kubeconfig.yml

- name: Kubernetes Master Services
  with_items:
    - kubelet
    - kube-apiserver
  template:
    src: "{{ item }}.service.j2"
    dest: "/etc/systemd/system/{{ item }}.service"
- name:
  with_items:
    - kube-controller-manager
    - kube-scheduler
    - kube-proxy
    - kube-etcd
  copy:
    src: "{{ item }}.service"
    dest: "/etc/systemd/system/{{ item }}.service"
- name: Enable Kubernetes services
  with_items:
    - kube-etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kube-proxy
    - kubelet
  ignore_errors: yes
  service:
    name: "{{ item }}"
    enabled: yes
    state: started

- file:
    path: /etc/kubernetes/manifests/
    state: directory
- name: Kubernetes manifests
  with_items:
    - kube-dns
    - kube-master
    - kube-dashboard
  template:
    src: "{{ item }}.yml.j2"
    dest: "/etc/kubernetes/manifests/{{ item }}.yml"

- name: Wait for Kubernetes API to come up
  uri:
   url: "http://127.0.0.1:8080/healthz"
   status_code: 200
  register: result
  until: result.status == 200
  retries: 10
  delay: 1

- name: Apply manifests
  with_items:
   - kube-dns
   - kube-master
   - kube-dashboard
  command: "kubectl apply -f /etc/kubernetes/manifests/{{ item }}.yml"
- name: Run mdns
  command: "kubectl --namespace kube-system run --image flixtech/k8s-mdns:0.2 k8s-mdns"

- name: Clear tmp dir, because otherwise vagrant user would not have access
  file:
    state: absent
    path: /tmp/kubectl.schema/

- name: Create dirs for nfs mapping
  with_items:
    - /www-data
    - /nfs-data
  file:
    state: directory
    path: "{{ item }}"

- name: Enable bash completion
  blockinfile:
    block: "{{ lookup('file', 'bash.bashrc') }}"
    path: /etc/bash.bashrc

- name: Add dir for auth sock from vagrant
  file:
    path: /sock/
    state: directory
    owner: vagrant

- name: Unmask Docker
  systemd:
    name: docker
    masked: false